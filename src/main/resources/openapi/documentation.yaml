openapi: "3.1.0"
info:
  title: "IBTLibrary API"
  description: "API para realizar as operações de gerenciamento da biblioteca da IBT"
  version: "1.0.0"
paths:
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
        required: true
      responses:
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Credenciais inválidas"
                Example#2:
                  description: ""
                  value:
                    message: "E-mail não encontrado no nosso banco de dados"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "Um e-mail válido deve ser fornecido"
  /api/v1/auth/register:
    post:
      tags:
        - Auth
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "E-mail encontrado no nosso banco de dados"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "O nome não pode ser vaio"
                      - "Um e-mail válido deve ser fornecido"
                      - "A senha deve conter, no mínimo, 8 caracteres, sendo eles uma letra maiúscula, uma letra minúscula, um dígito e um caractere especial"
  /api/v1/auth/register/librarian:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Auth
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de administrador"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "E-mail encontrado no nosso banco de dados"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "O nome não pode ser vaio"
                      - "Um e-mail válido deve ser fornecido"
                      - "A senha deve conter, no mínimo, 8 caracteres, sendo eles uma letra maiúscula, uma letra minúscula, um dígito e um caractere especial"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
  /api/v1/books:
    get:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "q"
          in: "query"
          description: Query to filter by title, author or ISBN
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
    post:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDto"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "Número ISBN deve estar preenchido e conter entre 10 a 13 dígitos"
                      - "O título não deve ser vazio"
                      - "A quantidade deve ser maior ou igual a 0"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Número ISBN deve ser único"
  /api/v1/books/{id}:
    get:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
    put:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDto"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "Número ISBN deve estar preenchido e conter entre 10 a 13 dígitos"
                      - "O título não deve ser vazio"
                      - "A quantidade deve ser maior ou igual a 0"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Número ISBN deve ser único"
    delete:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/loan:
    get:
      tags:
        - Loan
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "person_id"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "book_id"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "types"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
              enum:
                - "IN_DAYS"
                - "RETURNED"
                - "OVERDUE"
            style: form
            explode: true
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Loan"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "Forneça valores válidos para tipo de empréstimo"
  /api/v1/loan/{bookId}/{personId}:
    post:
      tags:
        - Loan
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "bookId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "personId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Loan"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Livro não encontrado na nossa base de dados"
                Example#2:
                  description: ""
                  value:
                    message: "Usuário não encontrado na nossa base de dados"
        "412":
          description: "Precondition Failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Todos os exemplares desse livro estão emprestados"
                Example#2:
                  description: ""
                  value:
                    message: "O usuário já tem o livro <bookName> com empréstimo ativo"
  /api/v1/loan/{loanId}/extend:
    patch:
      tags:
        - Loan
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Loan"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/loan/{loanId}/return:
    patch:
      tags:
        - Loan
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de bibliotecário"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Loan"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
  /api/v1/people:
    get:
      tags:
        - People
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "q"
          description: "Query to filter by name or e-mail"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
  /api/v1/people/{id}:
    get:
      tags:
        - People
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
    put:
      tags:
        - People
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePersonDto"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "O nome não pode ser vazio"
                      - "Um e-mail válido deve ser fornecido"
                      - "Apenas cargos de leitor e bibliotecário são aceitos. Entre em contato com o administrador do sistema"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de administrador"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      tags:
        - People
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de administrador"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Token inválido ou expirado"
  /api/v1/people/{id}/{role}:
    patch:
      tags:
        - People
      security:
        - bearerAuth: [ ]
      description: ""
      parameters:
        - name: "role"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Você não tem permissões de administrador"
                Example#2:
                  description: ""
                  value:
                    message: "Contate o administrador do sistema para realizar isso."
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    reasons:
                      - "Forneça um cargo válido"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    BadRequestResponse:
      type: "object"
      properties:
        reasons:
          type: "array"
          items:
            type: "string"
      required:
        - "reasons"
    ErrorResponse:
      type: "object"
      properties:
        message:
          type: "string"
      required:
        - "message"
    LoginDto:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
        - "email"
        - "password"
    LoginResponse:
      type: "object"
      properties:
        access_token:
          type: "string"
        refresh_token:
          type: "string"
      required:
        - "access_token"
        - "refresh_token"
    RegisterDto:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
      required:
        - "name"
        - "email"
        - "password"
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        isbn:
          type: "string"
        title:
          type: "string"
        author:
          type: "string"
        quantity:
          type: "integer"
          format: "int32"
      required:
        - "id"
        - "isbn"
        - "title"
        - "quantity"
    BookDto:
      type: "object"
      properties:
        isbn:
          type: "string"
        title:
          type: "string"
        author:
          type: "string"
        quantity:
          type: "integer"
          format: "int32"
      required:
        - "isbn"
        - "title"
        - "quantity"
    Person:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        role:
          type: "string"
          enum:
            - "READER"
            - "LIBRARIAN"
            - "ADMIN"
        email:
          type: "string"
      required:
        - "id"
        - "name"
        - "role"
        - "email"
    Loan:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        person:
          $ref: "#/components/schemas/Person"
        book:
          $ref: "#/components/schemas/Book"
        start_date:
          type: "string"
          format: "date-time"
        duration:
          type: "integer"
          format: "int32"
        return_date:
          type: "string"
          format: "date-time"
        type:
          type: "string"
          enum:
            - "IN_DAYS"
            - "RETURNED"
            - "OVERDUE"
      required:
        - "id"
        - "person"
        - "book"
        - "start_date"
        - "duration"
        - "type"
    UpdatePersonDto:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        role:
          type: "string"
          enum:
            - "READER"
            - "LIBRARIAN"
            - "ADMIN"
      required:
        - "name"
        - "email"
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes